[{"/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/index.tsx":"1","/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/App.tsx":"2","/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/CustomerMenu/index.tsx":"3","/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/HomePage/index.tsx":"4","/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/InputText/index.tsx":"5","/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/context.ts":"6","/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/LoginForm/index.tsx":"7"},{"size":178,"mtime":1607241113679,"results":"8","hashOfConfig":"9"},{"size":154,"mtime":1607242163332,"results":"10","hashOfConfig":"9"},{"size":2413,"mtime":1607241559663,"results":"11","hashOfConfig":"9"},{"size":649,"mtime":1607243387819,"results":"12","hashOfConfig":"9"},{"size":1256,"mtime":1607241804501,"results":"13","hashOfConfig":"9"},{"size":315,"mtime":1607241113572,"results":"14","hashOfConfig":"9"},{"size":2677,"mtime":1607243884233,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"j1xnmi",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/index.tsx",[],["33","34"],"/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/App.tsx",[],"/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/CustomerMenu/index.tsx",["35","36"],"import * as React from \"react\";\nimport { Menu, Input } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport \"./style.css\";\nimport { TextContext } from \"../context\";\nconst { SubMenu } = Menu;\nconst { TextArea } = Input;\n\ninterface TreeData {\n  key: string;\n  title: string;\n  [children: string]: any;\n}\n\nexport const treeData: [TreeData] = [\n  {\n    key: \"0\",\n    title: \"Australia\",\n    children: [\n      {\n        key: \"6\",\n        title: \"NSW\",\n        children: [\n          {\n            key: \"1\",\n            title: \"Sydney\",\n            children: [\n              {\n                key: \"2\",\n                title: \"Burwood\",\n              },\n              {\n                key: \"12\",\n                title: \"Darlington\",\n              },\n            ],\n          },\n          {\n            key: \"123\",\n            title: \"Newcarsle\",\n            children: [\n              {\n                key: \"23\",\n                title: \"City\",\n              },\n              {\n                key: \"1234\",\n                title: \"Country\",\n              },\n            ],\n          },\n        ],\n      },\n      {\n        key: \"126\",\n        title: \"QUD\",\n        children: [\n          {\n            key: \"1003\",\n            title: \"Brisbane\",\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst CustomerMenu: React.FC<{}> = (props: any) => {\n  const [menuTree, setMenuTree] = useState([]);\n  const { text } = React.useContext(TextContext);\n  const renderMenu = (data: any) => {\n    return data.map((item: any) => {\n      //如果有子节点，继续递归调用，直到没有子节点\n      if (item.children) {\n        return (\n          <SubMenu title={item.title} key={item.key}>\n            {renderMenu(item.children)}\n          </SubMenu>\n        );\n      }\n      //没有子节点就返回当前的父节点\n      return (\n        <Menu.Item title={item.title} key={item.key}>\n          {item.title}\n        </Menu.Item>\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (!text) {\n      setMenuTree(renderMenu(treeData));\n    } else {\n      setMenuTree(renderMenu([text]));\n    }\n  }, [text]);\n\n  return (\n    <div style={{ width: \"150px\" }}>\n      <Menu\n        className=\"menu-container\"\n        triggerSubMenuAction=\"click\"\n        mode=\"horizontal\"\n      >\n        {menuTree}\n      </Menu>\n    </div>\n  );\n};\n\nexport default CustomerMenu;\n","/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/HomePage/index.tsx",[],"/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/InputText/index.tsx",["37"],"import * as React from \"react\";\nimport { Button, Col, Input, message, Row } from \"antd\";\nimport { TextContext } from \"../context\";\nimport { treeData } from \"../CustomerMenu\";\nimport \"./style.css\";\n\nconst { TextArea } = Input;\n\nconst InputText: React.FC<{}> = () => {\n  const { text, setText } = React.useContext(TextContext);\n  const [textInput, setTextInput] = React.useState(\"\");\n  const submitText = (_text: string) => {\n    try {\n      setText(JSON.parse(_text));\n    } catch (e) {\n      message.error(\"Oops, your input is not a json format.\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>Please Type a proper Json followed by the rule on the right.</h1>\n      <Row>\n        <Col span={12}>\n          <TextArea\n            rows={20}\n            cols={5}\n            onChange={(e) => setTextInput(e.target.value)}\n          />\n        </Col>\n        <Col span={12}>\n          <TextArea\n            disabled={true}\n            rows={20}\n            cols={5}\n            value={JSON.stringify(treeData, null, 4)}\n          />\n        </Col>\n      </Row>\n      <Button\n        className=\"submit-button\"\n        onClick={() => submitText(textInput)}\n        type=\"primary\"\n      >\n        Submit\n      </Button>\n    </div>\n  );\n};\n\nexport default InputText;\n","/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/context.ts",[],"/Users/zhaojiangshan/Desktop/menu/ts-menu/ts-menu/src/LoginForm/index.tsx",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":9,"column":9,"nodeType":"44","messageId":"45","endLine":9,"endColumn":17},{"ruleId":"46","severity":1,"message":"47","line":98,"column":6,"nodeType":"48","endLine":98,"endColumn":12,"suggestions":"49"},{"ruleId":"42","severity":1,"message":"50","line":10,"column":11,"nodeType":"44","messageId":"45","endLine":10,"endColumn":15},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"@typescript-eslint/no-unused-vars","'TextArea' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderMenu'. Either include it or remove the dependency array.","ArrayExpression",["53"],"'text' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [renderMenu, text]",{"range":"56","text":"57"},[2085,2091],"[renderMenu, text]"]